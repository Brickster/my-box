group 'com.target'
version '1.0-SNAPSHOT'

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.6.12'
  }
}

apply plugin: 'codenarc'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker-compose'

repositories {
  mavenCentral()
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.12:indy'
  testCompile group: 'junit', name: 'junit', version: '4.12'

  // Spring Boot
  compile('org.springframework.boot:spring-boot-starter-web:1.5.2.RELEASE') {
    exclude module: 'spring-boot-starter-tomcat'
  }
  compile 'org.springframework.boot:spring-boot-starter-data-mongodb:1.5.2.RELEASE'
  compile 'org.springframework.boot:spring-boot-starter-actuator:1.5.2.RELEASE'
  compile 'org.springframework.boot:spring-boot-devtools:1.5.2.RELEASE'
  compile 'org.springframework.boot:spring-boot-starter-jetty:1.5.2.RELEASE'
  compile 'org.springframework.boot:spring-boot-configuration-processor:1.5.2.RELEASE'
  compile 'org.springframework.data:spring-data-commons:1.13.3.RELEASE'

  // jackson support for Java 8 date & time API
  compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1"

  // adds PATCH support
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'

  // validation
  compile 'javax.validation:validation-api:2.0.1.Final'
  compile 'org.hibernate:hibernate-validator:6.0.7.Final'

  codenarc "org.codenarc:CodeNarc:1.1"

  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
  testCompile 'org.springframework.boot:spring-boot-starter-test:1.5.2.RELEASE'
  testCompile 'cglib:cglib-nodep:3.2.4'
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/groovy')
    }
  }
  functionalTest {
    groovy {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/groovy')
    }
  }
}

codenarc {
  configFile rootProject.file('gradle/codenarc/codenarc.groovy')
}

codenarcTest {
  configFile rootProject.file('gradle/codenarc/codenarcTest.groovy')
}

codenarcIntegrationTest {
  configFile rootProject.file('gradle/codenarc/codenarcTest.groovy')
}

codenarcFunctionalTest {
  configFile rootProject.file('gradle/codenarc/codenarcTest.groovy')
}

task integrationTest(type: Test) {
  String testEnvArg = '-Dspring.profiles.active=test'

  if (jvmArgs) {
    jvmArgs.add(testEnvArg)
  } else {
    jvmArgs = [testEnvArg]
  }

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

task functionalTest(type: Test) {
  String testEnvArg = '-Dspring.profiles.active=test'

  if (jvmArgs) {
    jvmArgs.add(testEnvArg)
  } else {
    jvmArgs = [testEnvArg]
  }

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  outputs.upToDateWhen { false }
}

dockerCompose.isRequiredBy(integrationTest)
dockerCompose.isRequiredBy(functionalTest)

dockerCompose {
  useComposeFiles = ['src/test/resources/compose/compose-test.yml']
  executable = '/usr/local/bin/docker-compose'
  dockerExecutable = '/usr/local/bin/docker'
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
check.dependsOn functionalTest
functionalTest.mustRunAfter integrationTest
